<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function() {  /* widget controller */  var c = this;}]]></client_script>
        <controller_as>c</controller_as>
        <css>.power-controls {
  padding: 25px;
}

.camera-container {
  position: relative;
  width: 640px;
}


.camera-container .controls {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 99;
  display: flex;
  align-items: flex-end;
}

.controls button, .controls a {
  width: 55px;
  height: 55px;
  border-radius: 50%;
  margin: 10px 15px;
}

.controls button.disabled, .controls a.disabled {
  background-color: lightgray;
    pointer-events: none;
}

.controls a {
  padding: 16px;
}

.controls button i, .controls a i {
  font-size: 24px;
}

.controls button.camera-flip {
  transform: rotate(-21deg);
}

.controls button.camera-flip i {
  transform: skewX(50deg);
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>testcamera</id>
        <internal>false</internal>
        <link><![CDATA[function(scope){
	var mode = "user";
	var constraints = {video: {facingMode: mode}}
	var cameraContainer = $(".camera-container")[0];
	var image = $(".photo-image")[0];
	var download_photo_btn = $("#download_photo")[0];
	var delete_photo_btn = $("#delete_photo")[0];
	var video = $("video")[0];
	function getCamera() {
		if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia){
			navigator.mediaDevices.getUserMedia(constraints).then(function(mediaStream){
				video.srcObject = mediaStream;
				video.onloadedmetadata = function(e) {
					video.play();
					video.onplay =  function(){
						showVideo();
					}
				};
			})
		}
	}

	scope.flipCamera = function(){
		if(mode == "environment")
			mode = "user";
		else
			mode = "environment";
		constraints.video.facingMode = mode;
		getCamera();
	}

	scope.cameraOn = function() {
		getCamera();
	}

	scope.cameraOff = function() {
		cameraContainer.classList.remove("show");
		video.pause();
	}

	function showVideo(){
		cameraContainer.classList.add("show")
	}

	scope.take_snapshot = function(){

		var snap = takeSnapshot();

		// Show image. 
		image.setAttribute('src', snap);
		image.classList.remove("hide");

		// Enable delete and save buttons
		delete_photo_btn.classList.remove("hide");
		download_photo_btn.classList.remove("disabled");

		// Set the href attribute of the download button to the snap url.
		download_photo_btn.href = snap;

		// Pause video playback of stream.
		video.classList.add("hide");
		video.pause();
	}

	function takeSnapshot(){  
		var hidden_canvas = document.querySelector('canvas'),
			context = hidden_canvas.getContext('2d');

		var width = video.videoWidth,
			height = video.videoHeight;

		if (width && height) {

			// Setup a canvas with the same dimensions as the video.
			hidden_canvas.width = width;
			hidden_canvas.height = height;

			// Make a copy of the current frame in the video on the canvas.
			context.drawImage(video, 0, 0, width, height);

			// Turn the canvas image into a dataURL that can be used as a src for our photo.
			return hidden_canvas.toDataURL('image/png');
		}
	}

	scope.deletePhoto = function(){
		// Hide image.
		image.setAttribute('src', "");
		image.classList.add("hide");

		// Disable delete and save buttons
		delete_photo_btn.classList.add("hide");
		download_photo_btn.classList.add("disabled");

		// Resume playback of stream.
		video.play();
		video.classList.remove("hide");

	};

}]]></link>
        <name>TestCamera</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {  /* populate the 'data' object */  /* e.g., data.table = $sp.getValue('table'); */})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-10-22 03:39:22</sys_created_on>
        <sys_id>192b6a0fdb640010176d29464896199e</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>TestCamera</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_192b6a0fdb640010176d29464896199e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-10-22 03:44:32</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default">
  <div class="panel-heading">
    <h4 class="panel-title">${Take Inspection Photo}</h4>
  </div>
  <div class="panel-body">
    <div class="power-controls">
      <div class="btn-group">
        <button ng-click="cameraOn()" class="btn btn-primary">${Open Camera}</button>
        <button ng-click="cameraOff()" class="btn btn-info">${Close Camera}</button>
      </div>
    </div>
    <div class="camera-container hide">
      <img class="photo-image hide">
      <video></video>
      <div class="controls">
        <button ng-click="flipCamera()" class="bg-success text-primary camera-flip"><i class="fa fa-refresh"></i></button>
        <button ng-click="take_snapshot()" class="bg-success text-primary"><i class="fa fa-camera"></i></button>
        <a ng-click="download()" id="download_photo" class="bg-success disabled"><i class="fa fa-download"></i></a>
        <button id="delete_photo" ng-click="deletePhoto()" class="bg-danger hide"><i class="fa fa-close fa-lg"></i></button>
      </div>
      <canvas class="hide"></canvas>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
